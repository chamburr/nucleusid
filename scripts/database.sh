#!/bin/bash

database_url=""

init() {
    warning=false

    if [[ ! -x "$(command -v diesel)" ]]; then
        echo "Warning: diesel not found. Some commands may not work."
        warning=true
    fi

    if [[ ! -x "$(command -v sqlacodegen)" ]]; then
        echo "Warning: sqlacodegen not found. Some commands may not work."
        warning=true
    fi

    if [[ ! -f .env ]]; then
        echo "Warning: .env file not found. Some commands may not work."
        warning=true
    else
        database=$(grep "POSTGRES_DATABASE=" .env | sed 's/^.*=//')
        username=$(grep "POSTGRES_USERNAME=" .env | sed 's/^.*=//')
        password=$(grep "POSTGRES_PASSWORD=" .env | sed 's/^.*=//')
        host=$(grep "POSTGRES_HOST=" .env | sed 's/^.*=//')
        port=$(grep "POSTGRES_PORT=" .env | sed 's/^.*=//')
        database_url="postgresql://$username:$password@$host:$port/$database"
    fi

    if [[ "$warning" = true ]]; then
        echo ""
    fi
}

help() {
    echo "NucleusID Database"
    echo "Database management CLI. Configure details in .env file."
    echo ""
    echo "USAGE:"
    echo "    ./scripts/database.sh [COMMAND]"
    echo ""
    echo "COMMANDS:"
    echo "    help      Show usage information."
    echo "    setup     reate the database and run migrations."
    echo "    reset     Reset the entire database."
    echo "    create    Create a new migration."
    echo "    migrate   Run all pending migrations."
    echo "    revert    Revert the last migration."
    echo "    redo      Revert and re-run the last migration."
    echo "    list      List all the migrations."
    echo "    generate  Generate models from schema."
}

init

case "$1" in
    help|"")
        help
        ;;
    setup)
        echo "Setting up database..."
        diesel database setup --database-url $database_url
        ;;
    reset)
        echo "Resetting database..."
        diesel database reset --database-url $database_url
        ;;
    create)
        if [[ "$#" -eq 1 ]]; then
            echo "Usage: ./scripts/database.sh create <name>"
        else
            shift
            echo "Creating new migration..."
            diesel migration generate "$@" --database-url $database_url
        fi
        ;;
    migrate)
        echo "Running migrations..."
        diesel migration run --database-url $database_url
        ;;
    revert)
        echo "Reverting migration..."
        diesel migration revert --database-url $database_url
        ;;
    redo)
        echo "Redoing migration..."
        diesel migration redo --database-url $database_url
        ;;
    list)
        diesel migration list --database-url $database_url
        ;;
    generate)
        echo "Generating models..."
        echo "# This file is generated by scripts/database.sh." > server/models/__init__.py
        echo -e "# Please do not manually edit this file.\n" >> server/models/__init__.py
        cd server
        poetry run sqlacodegen $database_url | sed '1d' | sed 's/(Base/Table(Base/g' >> models/__init__.py
        black -q models/__init__.py
        ;;
    *)
        echo "The command $1 was not found."
        echo ""
        echo "Use ./scripts/database.sh help for more information."
        ;;
esac
